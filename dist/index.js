"use strict";
var plugins = require("./qenv.plugins");
var Qenv = (function () {
    function Qenv(basePathArg, envYmlPathArg) {
        if (basePathArg === void 0) { basePathArg = process.cwd(); }
        this.requiredEnvVars = getRequiredEnvVars(basePathArg);
        this.availableEnvVars = getAvailableEnvVars(this.requiredEnvVars, envYmlPathArg);
        this.missingEnvVars = getMissingEnvVars(this.requiredEnvVars, this.availableEnvVars);
        for (var keyArg in this.missingEnvVars) {
            plugins.beautylog.warn(this.missingEnvVars[keyArg] + " is required, but missing!");
        }
    }
    return Qenv;
}());
exports.Qenv = Qenv;
;
var getRequiredEnvVars = function (pathArg) {
    var result = [];
    var qenvFilePath = plugins.path.join(pathArg, "qenv.yml");
    var qenvFile = plugins.smartfile.local.toObjectSync(qenvFilePath);
    for (var keyArg in qenvFile.vars) {
        result.push(qenvFile.vars[keyArg]);
    }
    return result;
};
var getAvailableEnvVars = function (requiredEnvVarsArg, envYmlPathArg) {
    var result = [];
    envYmlPathArg = plugins.path.join(envYmlPathArg, "env.yml");
    var envYml;
    try {
        envYml = plugins.smartfile.local.toObjectSync(envYmlPathArg);
    }
    catch (err) {
        envYml = {};
    }
    for (var keyArg in requiredEnvVarsArg) {
        var requiredEnvVar = requiredEnvVarsArg[keyArg];
        if (process.env[requiredEnvVar]) {
            result.push(requiredEnvVar);
        }
        else if (envYml.hasOwnProperty(requiredEnvVar)) {
            process.env[requiredEnvVar] = envYml[requiredEnvVar];
            result.push(requiredEnvVar);
        }
    }
    return result;
};
var getMissingEnvVars = function (requiredEnvVarsArray, availableEnvVarsArray) {
    return plugins.lodash.difference(requiredEnvVarsArray, availableEnvVarsArray);
};

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QyxNQUFNLENBQUM7QUFDbEIsQ0FBQyxDQUFBO0FBRUQsSUFBSSxpQkFBaUIsR0FBRyxVQUFDLG9CQUE2QixFQUFDLHFCQUE4QjtJQUNqRixNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsb0JBQW9CLEVBQUMscUJBQXFCLENBQUMsQ0FBQztBQUNqRixDQUFDLENBQUEiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBwbHVnaW5zIGZyb20gXCIuL3FlbnYucGx1Z2luc1wiO1xuXG5leHBvcnQgY2xhc3MgUWVudiB7XG4gICAgcmVxdWlyZWRFbnZWYXJzOnN0cmluZ1tdO1xuICAgIGF2YWlsYWJsZUVudlZhcnM6c3RyaW5nW107XG4gICAgbWlzc2luZ0VudlZhcnM6c3RyaW5nW107XG4gICAgY29uc3RydWN0b3IoYmFzZVBhdGhBcmcgPSBwcm9jZXNzLmN3ZCgpLGVudlltbFBhdGhBcmcpe1xuICAgICAgICB0aGlzLnJlcXVpcmVkRW52VmFycyA9IGdldFJlcXVpcmVkRW52VmFycyhiYXNlUGF0aEFyZyk7XG4gICAgICAgIHRoaXMuYXZhaWxhYmxlRW52VmFycyA9IGdldEF2YWlsYWJsZUVudlZhcnModGhpcy5yZXF1aXJlZEVudlZhcnMsZW52WW1sUGF0aEFyZyk7XG4gICAgICAgIHRoaXMubWlzc2luZ0VudlZhcnMgPSBnZXRNaXNzaW5nRW52VmFycyh0aGlzLnJlcXVpcmVkRW52VmFycyx0aGlzLmF2YWlsYWJsZUVudlZhcnMpO1xuICAgICAgICBmb3IobGV0IGtleUFyZyBpbiB0aGlzLm1pc3NpbmdFbnZWYXJzKXtcbiAgICAgICAgICAgIHBsdWdpbnMuYmVhdXR5bG9nLndhcm4odGhpcy5taXNzaW5nRW52VmFyc1trZXlBcmddICsgXCIgaXMgcmVxdWlyZWQsIGJ1dCBtaXNzaW5nIVwiKVxuICAgICAgICB9XG4gICAgfVxufTtcblxubGV0IGdldFJlcXVpcmVkRW52VmFycyA9IChwYXRoQXJnOnN0cmluZyk6c3RyaW5nW10gPT4ge1xuICAgIGxldCByZXN1bHQ6c3RyaW5nW10gPSBbXTtcbiAgICBsZXQgcWVudkZpbGVQYXRoID0gcGx1Z2lucy5wYXRoLmpvaW4ocGF0aEFyZyxcInFlbnYueW1sXCIpO1xuICAgIGxldCBxZW52RmlsZSA9IHBsdWdpbnMuc21hcnRmaWxlLmxvY2FsLnRvT2JqZWN0U3luYyhxZW52RmlsZVBhdGgpO1xuICAgIGZvcihsZXQga2V5QXJnIGluIHFlbnZGaWxlLnZhcnMpe1xuICAgICAgICByZXN1bHQucHVzaChxZW52RmlsZS52YXJzW2tleUFyZ10pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuXG5sZXQgZ2V0QXZhaWxhYmxlRW52VmFycyA9IChyZXF1aXJlZEVudlZhcnNBcmc6c3RyaW5nW10sZW52WW1sUGF0aEFyZzpzdHJpbmcpOnN0cmluZ1tdID0+IHtcbiAgICBsZXQgcmVzdWx0ID0gW107XG4gICAgZW52WW1sUGF0aEFyZyA9IHBsdWdpbnMucGF0aC5qb2luKGVudlltbFBhdGhBcmcsXCJlbnYueW1sXCIpXG4gICAgbGV0IGVudlltbDtcbiAgICB0cnkge1xuICAgICAgICBlbnZZbWwgPSBwbHVnaW5zLnNtYXJ0ZmlsZS5sb2NhbC50b09iamVjdFN5bmMoZW52WW1sUGF0aEFyZyk7XG4gICAgfVxuICAgIGNhdGNoKGVycil7XG4gICAgICAgIGVudlltbCA9IHt9O1xuICAgIH1cbiAgICBmb3IobGV0IGtleUFyZyBpbiByZXF1aXJlZEVudlZhcnNBcmcpe1xuICAgICAgICBsZXQgcmVxdWlyZWRFbnZWYXI6c3RyaW5nID0gcmVxdWlyZWRFbnZWYXJzQXJnW2tleUFyZ107XG4gICAgICAgIGlmKHByb2Nlc3MuZW52W3JlcXVpcmVkRW52VmFyXSl7XG4gICAgICAgICAgICByZXN1bHQucHVzaChyZXF1aXJlZEVudlZhcik7XG4gICAgICAgIH0gZWxzZSBpZihlbnZZbWwuaGFzT3duUHJvcGVydHkocmVxdWlyZWRFbnZWYXIpKXtcbiAgICAgICAgICAgIHByb2Nlc3MuZW52W3JlcXVpcmVkRW52VmFyXSA9IGVudlltbFtyZXF1aXJlZEVudlZhcl07XG4gICAgICAgICAgICByZXN1bHQucHVzaChyZXF1aXJlZEVudlZhcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxubGV0IGdldE1pc3NpbmdFbnZWYXJzID0gKHJlcXVpcmVkRW52VmFyc0FycmF5OnN0cmluZ1tdLGF2YWlsYWJsZUVudlZhcnNBcnJheTpzdHJpbmdbXSkgPT4ge1xuICAgIHJldHVybiBwbHVnaW5zLmxvZGFzaC5kaWZmZXJlbmNlKHJlcXVpcmVkRW52VmFyc0FycmF5LGF2YWlsYWJsZUVudlZhcnNBcnJheSk7XG59Il19
